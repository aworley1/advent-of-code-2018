val inputIds = listOf("auxwcbzrmdvpsjfgkrthnkioqm", "auxwcbzrmdvpsjfgbltonyijqe", "auxwcbzrmdfpsefgklthnoioqe", "auxwcbzrmdvpsjfgkluhnjisqe", "auxwcbzrmdvesjfgdzthnyioqe", "auxwcbzrmdvhsjfgklthnmijqe", "auxwcbzridvpsjfgkltxeyioqe", "ayxwcbzrgdvpsjfgklthiyioqe", "ajxwcbzrmdvpsjfgklkhnyiode", "auxwcbcrmdvpsjfqelthnyioqe", "auxwcbzrmsvpsjsgklthnyiope", "auxwcbzrmqvpsjzgklghnyioqe", "auxwcbzrmdvpsjtqklthxyioqe", "auxwcbzrmdopsjfdklthncioqe", "auxwcbzrmdvpsjfgkltmhyfoqe", "aixwcbzrmdvpsjfgllthdyeoqe", "vuxicbzrmdepsjfgklthnyioqe", "auxwcbbxmdkpsjfgklthnyioqe", "auxwcbzrgdvpsofaklthnyioqe", "auxycbzrmdvpsjfgklthnyuose", "aujwcbzrmdvprjfgkltcnyioqe", "auxwgbzrmdvpsjfgyzthnyioqe", "auxwcbzrmavpsjfgkltsnyiome", "auxwcbgrmdvpsjfgkdthnrioqe", "kuxwcbzrmdvpsyfgklthnyioue", "auxwcbzomdvpjdfgklthnyioqe", "auxwcbzrmdppsjfgklthvyifqe", "aunwubzrmdvpsjrgklthnyioqe", "auxwcbzrmoipsjfgklbhnyioqe", "auxwdbzrmdvpsjfgmlthnyioce", "auxwcbzjmsvpsjfiklthnyioqe", "auxwcbzrmwcpsjfcklthnyioqe", "auxwcbzfmdvprjfhklthnyioqe", "auxdcbzrgdvpsjfgklthnyxoqe", "wuxwbbzrmdvpsjfgklthnyiote", "auowcbjrmdvpsjfgklthnyfoqe", "auxwsbzrmdvpsjfglltcnyioqe", "quxwcbzrmdvpkjfgklthnyioqt", "vuxwcbzrudvpsjfgklthnyioqi", "puxwcbzrmdvgsjfgklthncioqe", "luxdcbzrmdvpsjfgkothnyioqe", "auxwcbzrmdvpsjfyklthfhioqe", "auxwcbqrmdvpsjfgkldhnyiote", "quxwcbzrmlvpsjfgklthnyioqi", "auxwcbzgmdvpsjfoklthnyiuqe", "auxwcbzrmdvpsbfgkltdjyioqe", "auxwcbzsmdrpsjfgklthpyioqe", "auxwcbzrmfvpsjfwklthnyiote", "auxbkpzrmdvpsjfgklthnyioqe", "auxwcbzrddvpsjfsklthnyroqe", "abxwcbzrmdvpsjfgkltdnyivqe", "awxwcbzrmvvpsjfgklthngioqe", "auxwcbzrmkvgsjfgkltcnyioqe", "auxwcbammdvpsjfgklthpyioqe", "auxwcbhrmdvpsjfgtlthnuioqe", "auxwcpzrmdvpbjogklthnyioqe", "auxwcbzrmdvpslfgklbhkyioqe", "auxwcbsrmdvpjjfgkldhnyioqe", "auxwcbzrmdqpsjfgauthnyioqe", "ydxwcbxrmdvpsjfgklthnyioqe", "auxwcbzrmdvpejfgklthnyyofe", "auxwchzrmxvpsjfgklthnyioqh", "auxwcbzrtdvpsjfgklxhnzioqe", "auxwcbyrmdvpsnfgklnhnyioqe", "auxwcbzrcdvpsjugklihnyioqe", "auxwcbzrddvpsjfgklhhnyiaqe", "aumwtbzrmdvpsjfgklthnyitqe", "auxucbzrmdvpsjfgklthwfioqe", "auxwcbzrmdvpzmfgkllhnyioqe", "auxwcbzrmdvpsjhgklthntiome", "buxwzbzrmdvpszfgklthnyioqe", "ouxwcbzsgdvpsjfgklthnyioqe", "auxwcbzrmdvpsjfskltgnyioqz", "auxwcbbrmdvpsjftklthnyioqu", "quxocbzrmdvpsjfgklthfyioqe", "acxwcbzrmdvpsjfgklfhnrioqe", "auxwcbzrmdnpsjfrkjthnyioqe", "wuxwybzrmdwpsjfgklthnyioqe", "auxwgbxrmdvpsjfghlthnyioqe", "atxwcbzrmdvnsjfgklthnyjoqe", "acxwcbzmmdvpsjfbklthnyioqe", "auxhcbzrmdvbsjbgklthnyioqe", "auxwlbzrfdvpsjfgxlthnyioqe", "auxwmbzrmdfpsjqgklthnyioqe", "auxwcbzrmdvpsgfgklahnyigqe", "auxwgbzrmdvpsjfgzldhnyioqe", "auxwcbzrmdvpydfgklthnyiohe", "auxwxbzrmdvpsjfsklchnyioqe", "auxqcbzrmdvpsjfgqlthnyiwqe", "auxwcozrmdvssbfgklthnyioqe", "auxvcczrmdvpsufgklthnyioqe", "auxwcbzrudvpsjfgklyhnyioxe", "aulwcbzrmdvpsjqgknthnyioqe", "auukcbzrmdvpsjfgklthtyioqe", "auxwcszimdvpsjfgklthnyigqe", "juxwcbzrbdvpsjfgklthnyboqe", "auxwcbzrmdvpjofgklthnyioqj", "auxwcbzrmdvpsjfgplfhnyione", "auxwcbzrmdhpsjfgkltknyeoqe", "luxwcqzrmdvpsjfgklthnbioqe", "uuxwcbzrmdvpsjfgkithnyiiqe", "auxwcbzrmdvpdjfgkrthnyeoqe", "auuwcbnrmdvpsjfgklthnjioqe", "auxwcnzrmdvpsjvgklthnyooqe", "auxwcbzcmdvpsjfcklthnyiose", "auxwcbzrldfpsjfgklthjyioqe", "auxwcizrmdvpsjfjklthnymoqe", "auxwcbtrmdvpsjfgtlphnyioqe", "amxwcbzrmdvksjfgklthnyiove", "auxwcbzrmdvpszfgkpthnyiuqe", "auxwcbzrmdvxdjfgkltqnyioqe", "auxwcbzrudvpsjfgklthnymiqe", "auxwcbirmdvfsjfgklmhnyioqe", "auwwcbzrndvprjfgklthnyioqe", "auxwcbormdgpsjfgklbhnyioqe", "auxwabzrmdupsjfgklthnyioqt", "auxvcbzrmdvpsjfgkltrmyioqe", "auxwcbzrmddpsjfsklthnyizqe", "auxwcczrmuvpyjfgklthnyioqe", "auxwcczrmdvpsnfgkpthnyioqe", "auxkcbzrmdvpsjfhklihnyioqe", "auxwcbzrmdvpsjfgklthnkijje", "auxwcbzcmdvpsjpgkldhnyioqe", "auxwcnzrudvpstfgklthnyioqe", "xuxwcbzrgdvusjfgklthnyioqe", "aaxwcbzrmdvpsjvgklthnyidqe", "auxwcbztmdvpsjfgklthnyhqqe", "auxwcbzrmfvpsjfgklthnyilfe", "auxwcbzrmdvksjfgklthjyioqq", "auxwcbzrmdzksjfgktthnyioqe", "auxwcbzrmfvpszfgklohnyioqe", "auxwckzamdvpsjfgklthnyioqs", "auxwcmzrhdvpsjfaklthnyioqe", "fuxwcbzrmdapsjfgklrhnyioqe", "avxwxbzrmdvpsjfgklthniioqe", "auxwubzrmevpsjfgkltpnyioqe", "fuxwcbzrgdvpsjfgklhhnyioqe", "duxwwbdrmdvpsjfgklthnyioqe", "audwcbzrmdvpnjcgklthnyioqe", "auxtcbzrmdvpsjmgklthnyyoqe", "aucwcbwrmdepsjfgklthnyioqe", "auxwcbzrudvpsjfpklthnyiose", "auxwcbzridvpsjfsklthxyioqe", "auxtcbzrmdvpscfgklyhnyioqe", "auxwcbzrmdvppjfgklthnyivee", "auxwdbzrmuvpskfgklthnyioqe", "auxwubzrmdvosjfgklthnyiope", "auxwcbzrmhnpsjfgklthnyimqe", "auxwcbzrmdqpwjfgkltpnyioqe", "auxwcbormdvpsjljklthnyioqe", "auxwcbzrmdjpsjfgkltjpyioqe", "auxwcbzrmdvpszfgklthkyizqe", "auxwcbzighvpsjfgklthnyioqe", "auxwcbzrmdlpsjfgcythnyioqe", "auxwcbzumdvpsjflklthnyimqe", "pdxwcbzrmdvpsjfgklthnyihqe", "auxwcbzrsdvpsjfgklhhvyioqe", "auxwcfzamdvpsjfgkmthnyioqe", "aexwcdzrmdvpsjogklthnyioqe", "auxxcbkrmavpsjfgklthnyioqe", "auxwcbzredvssjfgklthryioqe", "aupwqbzrmdvpsjfgklthnyioqc", "auxwcbzrmdvpkcagklthnyioqe", "auxwcbzrmdvwsbfgklthnlioqe", "aunwcbzxmdvhsjfgklthnyioqe", "auxwcbzrhddpsjfgklthnnioqe", "ouxwcbzrmdvtsifgklthnyioqe", "auxwcbzrmdqpsjfgklthnyfoqp", "auxwrbzrhdvpsjfgolthnyioqe", "auxwcbcqmdvpsjugklthnyioqe", "auxwcbzrqdvpsjhgklthnjioqe", "auxmcbzrmdvpsjfgmlthnyjoqe", "auxwcbzrmdvpsjfgzlthnycoqv", "auswcbzrmdvpsffgslthnyioqe", "auxwcbzrfdvpsjfrmlthnyioqe", "auxwcbzrmdvpsjngzlthnxioqe", "auxwcbzrmdvpsjfuqlthnyiyqe", "auxwzbzrrdvosjfgklthnyioqe", "auxwcbzdmdvpsjfikxthnyioqe", "guxwcbzrmdvpsjfgmlthnytoqe", "auxwcbzrmdvpspfgkytenyioqe", "auxvcbzrldvpsjfgklthnyhoqe", "auxwcbzrmavpckfgklthnyioqe", "autwcbzrmdvpsafgklthnyirqe", "auxwcbzrxuvpsjfgklthmyioqe", "auxwcbarmdppsjfgklthnywoqe", "anxvcbzrmdvpsjfgklthnyijqe", "auxwcbwrmdapsjngklthnyioqe", "abxwcbzrmdvpsjugkltgnyioqe", "auxwcbtrmdvpsjfgkltunyioue", "aujwcbzrmovpsjfgklthryioqe", "auxwcbzrydvpsjfgklthndikqe", "auxwcbzrmdvpsjfgklmrnyioqo", "auxwcbzrddvpsjfggithnyioqe", "auxwcbzrmdvpfjfaklthlyioqe", "fuxtcbzrmdvpsjfgklwhnyioqe", "tuxwcbzrjdvpsjfgjlthnyioqe", "auxwcbzrmdppsofgklthnyfoqe", "auxvclzamdvpsjfgklthnyioqe", "auxwcbzrmdvpsjfdklhhnzioqe", "auxwcbzrmsvpsvdgklthnyioqe", "arxfcbzrmdvpsvfgklthnyioqe", "auxzcbzrmdvpsjfgklthnhioqj", "auxwcbzrrdvpsjfgpltunyioqe", "auxuibzrmdvpwjfgklthnyioqe", "auxwcbzrwdqpsjfgklthnyooqe", "aujwcbzrmdvpsjvgklthxyioqe", "abxwcbzrmfvpsjfgklthnyxoqe", "aurwcbzrmdvpshfgklthnyhoqe", "auxwcbzjmdvpsjfgknthnycoqe", "auxwcbzrmdvpsjfgklmhxwioqe", "auxwcbzrmfvpsjfgklthnyiorq", "auxwcbormdvpsjfgklwhnlioqe", "auxwctzrmdvpsjfgklcknyioqe", "awxwcbzrmdvpsjfgvlthnyiome", "auxwcbzrmdvpsjfjklthnyixje", "auxwcsxrmdvpsjfgkltsnyioqe", "auxbmbzrmdvpsjfgklthnyioce", "auxwcbzrmdvpsjfukzthnytoqe", "aixwcbzrmdvpsjfgllthdyioqe", "auxwcbzrmdypsjfgklthnlioqy", "auxccbzrmdvpsjfgkltrnnioqe", "auxwcznrmdvpsjfgklthnykoqe", "auxwmqzrmdvpsjfgilthnyioqe", "auxwcbzrmdvpdyfgolthnyioqe", "auxwcbzrmdvpsjfgkmohnqioqe", "auxwcfzrmzvpsjfoklthnyioqe", "auxwjyzrmdvpsjfgulthnyioqe", "auxwcgzredvpsjfgkxthnyioqe", "wuxwcbtrmdvpsjfgklthnyiofe", "auxwcbzrmdopsgfgklthncioqe", "auxmcbzjmdvpsjfgklbhnyioqe", "auxwlbzrmdvpsjffklthgyioqe", "auxwcbzrmrvpsjfgqlthtyioqe", "kuxwhbzrmdvpsjfgklthgyioqe", "auxwcozrmdgpsjfgklthnydoqe", "auxwdbzrmdvpdjfgklthgyioqe", "auxwqbzrmdapsvfgklthnyioqe", "auqwcbzridvjsjfgklthnyioqe", "auxwckzrmdvpsjfoklthnyuoqe", "auxwcbzvmdvpsjfgklghnyiome", "auxtcbzrmdvpsjqgktthnyioqe", "auxwcbzrmdvesjfgkljhnnioqe", "auxwcbzrmpvpsqfgklthnqioqe", "auxwcbzrmdcpsqfgklthnzioqe", "yuxwcbzrmdvpsjggklthnlioqe", "auxwcbzradvpsjftklthoyioqe", "auxwcbzrmdvjujfgklmhnyioqe", "auxwcbzrmdvpsrfgklpinyioqe", "auxwobzrvqvpsjfgklthnyioqe")

//Find two strings that differ by only one letter
outer@ for (firstId in inputIds) {
    for (secondId in inputIds) {
        if (differByOneChar(firstId, secondId)) {
            println("First Id: $firstId, second Id: $secondId")
            println("Similar characters: ${similarCharacters(firstId, secondId)}")
            break@outer
        }
    }
}

fun differByOneChar(firstId: String, secondId: String): Boolean {
    val firstCharArray = firstId.toCharArray()
    val secondCharArray = secondId.toCharArray()

    var differences = 0
    for (i in 1..firstCharArray.size) {
        if (firstCharArray[i-1] != secondCharArray[i-1]) differences++
    }

    return differences == 1
}

fun similarCharacters(firstId: String, secondId: String): String {
    val firstCharArray = firstId.toCharArray()
    val secondCharArray = secondId.toCharArray()

    var similarCharacters = ""
    for (i in 1..firstCharArray.size) {
        if (firstCharArray[i-1] == secondCharArray[i-1]) {
            similarCharacters = similarCharacters + firstCharArray[i-1]
        }
    }

    return similarCharacters
}
